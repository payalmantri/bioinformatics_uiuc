[2023-02-11 19:04:40] This is codeql database create sample --language=python
[2023-02-11 19:04:40] Log file was started late.
[2023-02-11 19:04:40] [PROGRESS] database create> Initializing database at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample.
[2023-02-11 19:04:40] Running plumbing command: codeql database init --language=python --source-root=/Users/payalmantri/Desktop/practice/bioinformatics_uiuc --allow-missing-source-root=false --allow-already-existing -- /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample
[2023-02-11 19:04:40] Calling plumbing command: codeql resolve languages --format=json
[2023-02-11 19:04:40] [DETAILS] resolve languages> Scanning for [codeql-extractor.yml] from /Users/payalmantri/Desktop/CS 598/codeql/.codeqlmanifest.json
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/go/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/python/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/java/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/html/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/xml/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/properties/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/cpp/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/csv/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/csharp/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/javascript/codeql-extractor.yml.
[2023-02-11 19:04:40] [DETAILS] resolve languages> Parsing /Users/payalmantri/Desktop/CS 598/codeql/ruby/codeql-extractor.yml.
[2023-02-11 19:04:40] Plumbing command codeql resolve languages completed:
                      {
                        "extractors" : {
                          "go" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/go"
                            }
                          ],
                          "python" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/python"
                            }
                          ],
                          "java" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/java",
                              "extractor_options" : {
                                "exclude" : {
                                  "title" : "A glob excluding files from analysis.",
                                  "description" : "A glob indicating what files to exclude from the analysis.\n",
                                  "type" : "string"
                                }
                              }
                            }
                          ],
                          "html" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/html"
                            }
                          ],
                          "xml" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/xml"
                            }
                          ],
                          "properties" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/properties"
                            }
                          ],
                          "cpp" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/cpp"
                            }
                          ],
                          "csv" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/csv"
                            }
                          ],
                          "csharp" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/csharp",
                              "extractor_options" : {
                                "trap" : {
                                  "title" : "Options pertaining to TRAP.",
                                  "description" : "Options pertaining to TRAP.",
                                  "type" : "object",
                                  "properties" : {
                                    "compression" : {
                                      "title" : "Controls compression for the TRAP files written by the extractor.",
                                      "description" : "This option is only intended for use in debugging the extractor. Accepted values are 'brotli' (the default, to write brotli-compressed TRAP), 'gzip', and 'none' (to write uncompressed TRAP).\n",
                                      "type" : "string",
                                      "pattern" : "^(none|gzip|brotli)$"
                                    }
                                  }
                                },
                                "buildless" : {
                                  "title" : "Whether to use buildless (standalone) extraction.",
                                  "description" : "A value indicating, which type of extraction the autobuilder should perform. If 'true', then the standalone extractor will be used, otherwise tracing extraction will be performed. The default is 'false'. Note that buildless extraction will generally yield less accurate analysis results, and should only be used in cases where it is not possible to build the code (for example if it uses inaccessible dependencies).\n",
                                  "type" : "string",
                                  "pattern" : "^(false|true)$"
                                },
                                "cil" : {
                                  "title" : "Whether to enable CIL extraction.",
                                  "description" : "A value indicating, whether CIL extraction should be enabled. The default is 'true'.\n",
                                  "type" : "string",
                                  "pattern" : "^(false|true)$"
                                }
                              }
                            }
                          ],
                          "javascript" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/javascript",
                              "extractor_options" : { }
                            }
                          ],
                          "ruby" : [
                            {
                              "extractor_root" : "/Users/payalmantri/Desktop/CS 598/codeql/ruby"
                            }
                          ]
                        }
                      }
[2023-02-11 19:04:40] [PROGRESS] database init> Calculating baseline information in /Users/payalmantri/Desktop/practice/bioinformatics_uiuc
[2023-02-11 19:04:40] [SPAMMY] database init> Ignoring the following directories when processing baseline information: .git, .hg, .svn.
[2023-02-11 19:04:40] [DETAILS] database init> Running command in /Users/payalmantri/Desktop/practice/bioinformatics_uiuc: /Users/payalmantri/Desktop/CS 598/codeql/tools/osx64/scc --by-file --exclude-dir .git,.hg,.svn --format json .
[2023-02-11 19:04:40] [SPAMMY] database init> Found 1 baseline files for python.
[2023-02-11 19:04:40] [PROGRESS] database init> Calculated baseline information for languages: python (66ms).
[2023-02-11 19:04:40] [PROGRESS] database init> Resolving extractor python.
[2023-02-11 19:04:40] [DETAILS] database init> Found candidate extractor root for python: /Users/payalmantri/Desktop/CS 598/codeql/python.
[2023-02-11 19:04:40] [PROGRESS] database init> Successfully loaded extractor Python (python) from /Users/payalmantri/Desktop/CS 598/codeql/python.
[2023-02-11 19:04:40] [PROGRESS] database init> Created skeleton CodeQL database at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample. This in-progress database is ready to be populated by an extractor.
[2023-02-11 19:04:40] Plumbing command codeql database init completed.
[2023-02-11 19:04:40] [PROGRESS] database create> Running build command: []
[2023-02-11 19:04:40] Running plumbing command: codeql database trace-command --working-dir=/Users/payalmantri/Desktop/practice/bioinformatics_uiuc --index-traceless-dbs --no-db-cluster -- /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample
[2023-02-11 19:04:40] Using autobuild script /Users/payalmantri/Desktop/CS 598/codeql/python/tools/autobuild.sh.
[2023-02-11 19:04:40] [PROGRESS] database trace-command> Running command in /Users/payalmantri/Desktop/practice/bioinformatics_uiuc: [/Users/payalmantri/Desktop/CS 598/codeql/python/tools/autobuild.sh]
[2023-02-11 19:04:40] [build-stderr] /bin/sh: python2: command not found
[2023-02-11 19:04:40] [build-stdout] 'HW 1 - Sequence Alignment' appears to be the root.
[2023-02-11 19:04:40] [build-stdout] Will try to guess Python version, as it was not specified in `lgtm.yml`
[2023-02-11 19:04:40] [build-stdout] Trying to guess Python version based on Trove classifiers in setup.py
[2023-02-11 19:04:40] [build-stdout] Did not find setup.py (expected it to be at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/HW 1 - Sequence Alignment/setup.py)
[2023-02-11 19:04:40] [build-stdout] Trying to guess Python version based on travis file
[2023-02-11 19:04:40] [build-stdout] Did not find any travis files (expected them at either ['/Users/payalmantri/Desktop/practice/bioinformatics_uiuc/HW 1 - Sequence Alignment/.travis.yml', '/Users/payalmantri/Desktop/practice/bioinformatics_uiuc/HW 1 - Sequence Alignment/travis.yml'])
[2023-02-11 19:04:40] [build-stdout] Trying to guess Python version based on installed versions
[2023-02-11 19:04:40] [build-stdout] Wanted to run Python 2, but it is not available. Using Python 3 instead
[2023-02-11 19:04:40] [build-stdout] This script is running Python 3, but Python 2 is also available (as 'python3')
[2023-02-11 19:04:40] [build-stdout] Could not guess Python version, will use default: Python 3
[2023-02-11 19:04:40] [build-stdout] Calling python3 /Users/payalmantri/Desktop/CS 598/codeql/python/tools/get_venv_lib.py
[2023-02-11 19:04:40] [build-stdout] Calling python3 -S /Users/payalmantri/Desktop/CS 598/codeql/python/tools/python_tracer.py -v -z all -c /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/working/trap_cache -p /Users/payalmantri/opt/miniconda3/lib/python3.9/site-packages -R /Users/payalmantri/Desktop/practice/bioinformatics_uiuc
[2023-02-11 19:04:40] [build-stdout] [INFO] Extraction will use the Python 3 standard library.
[2023-02-11 19:04:40] [build-stdout] [INFO] sys_path is: ['/Users/payalmantri/Desktop/CS 598/codeql/python/tools', '/Users/payalmantri/opt/miniconda3/lib/python39.zip', '/Users/payalmantri/opt/miniconda3/lib/python3.9', '/Users/payalmantri/opt/miniconda3/lib/python3.9/lib-dynload']
[2023-02-11 19:04:40] [build-stdout] [INFO] Python version 3.9.15
[2023-02-11 19:04:40] [build-stdout] [INFO] Python extractor version 5.29
[2023-02-11 19:04:41] [build-stdout] [WARN] [1] Error '(unicode error) 'unicodeescape' codec can't decode bytes in position 1024-1025: truncated \uXXXX escape' while parsing value '"\\"\\"\\"## Part 3: Align profile to profile - 20 points\\n\\n\\nNow using the given example, let\'s write the function `align_profile_profile` which takes two multiple sequence alignments, an alphabet and the scoring function for that alphabet, and returns their optimal alignment score as well as the optimal alignment. This function is a bit more complicated than aligning a sequence to a profile. This is because we need 4 separate scoring functions.\\n\\nGiven a profile $p$ for the first alignment, and a profile $q$ representing the second, and alphabet $\\\\Sigma$:\\n\\n* $\\\\delta(x,y)$ gives us the score for aligning character $x$ and character $y$.\\n* $\\\\tau_1(x,i)$ gives us the score for aligning character $x$ at position $i$ in the first profile $p$.\\n* $\\\\tau_2(y,j)$ gives us the score for aligning character $y$ at position $j$ in the second profile $q$.\\n* $\\\\sigma(i,j)$ gives us the score for aligning the $i^{th}$ column of $p$ with the $j^{th}$ column of $q$.\\n\\nThe scoring function $\\\\sigma$ can be computed as follows $$\\\\sigma(i,j) = \\\\underset{x\\\\in\\\\Sigma}{\\\\sum}\\\\underset{y\\\\in\\\\Sigma}{\\\\sum}p(x,i)q(y,j)\\\\delta(x,y)$$\\n\\nOnce we have $\\\\sigma$, we can use it to come up with a recurrence for aligning two profiles. If $S[i,j]$ is the score for first $i$ columns of profile $p$ with the first $j$ columns of profile $j$, then we have:\\n\\n$$S[i,j] = max \\\\begin{cases}\\n0 & \\\\text{$i=0$ and $j=0$}\\\\\\\\\\nS[i-1,j] + \\\\tau_1(-,i),& i \\\\gt 0\\\\\\\\\\nS[i,j-1] + \\\\tau_2(-,j),& j \\\\gt 0\\\\\\\\\\nS[i-1,j-1] + \\\\sigma(i,j),& \\\\text{$i\\\\gt0$ and $j\\\\gt0$}\\\\\\\\\\n\\\\end{cases}$$\\n\\nGiven the recurrence, complete the following parts:\\n* Finish the `compute_sigma` function which computes the scoring function for aligning columns of profile.\\n* Complete the `align_profile_profile` function below using the given recurrence.\\n\\nFor tie breaking in `align_profile_profile`, please follow the priority defined in `align_sequence_profile` (the given function): (LEFT, UP, TOPLEFT).\\n\\"\\"\\""' at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/copy_of_hw2.py:265:0:293:3
[2023-02-11 19:04:41] [build-stdout] [INFO] [1] Read 2370 nodes and 501 edges from TSG output
[2023-02-11 19:04:41] [build-stdout] [WARN] [1] Failed to analyse imports of /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/copy_of_hw2.py : Syntax Error (line 26)
[2023-02-11 19:04:41] [build-stdout] [TRACEBACK] [1] "semmle/python/imports.py", line 94, in get_import_nodes
[2023-02-11 19:04:41] [build-stdout] [TRACEBACK] [1] "semmle/python/modules.py", line 120, in py_ast
[2023-02-11 19:04:41] [build-stdout] [TRACEBACK] [1] "semmle/python/modules.py", line 117, in py_ast
[2023-02-11 19:04:41] [build-stdout] [TRACEBACK] [1] "semmle/python/parser/tsg_parser.py", line 223, in parse
[2023-02-11 19:04:41] [build-stdout] [TRACEBACK] [1] "semmleFile "<string>", line 26
[2023-02-11 19:04:42] [build-stdout] [WARN] [1] Error '(unicode error) 'unicodeescape' codec can't decode bytes in position 1024-1025: truncated \uXXXX escape' while parsing value '"\\"\\"\\"## Part 3: Align profile to profile - 20 points\\n\\n\\nNow using the given example, let\'s write the function `align_profile_profile` which takes two multiple sequence alignments, an alphabet and the scoring function for that alphabet, and returns their optimal alignment score as well as the optimal alignment. This function is a bit more complicated than aligning a sequence to a profile. This is because we need 4 separate scoring functions.\\n\\nGiven a profile $p$ for the first alignment, and a profile $q$ representing the second, and alphabet $\\\\Sigma$:\\n\\n* $\\\\delta(x,y)$ gives us the score for aligning character $x$ and character $y$.\\n* $\\\\tau_1(x,i)$ gives us the score for aligning character $x$ at position $i$ in the first profile $p$.\\n* $\\\\tau_2(y,j)$ gives us the score for aligning character $y$ at position $j$ in the second profile $q$.\\n* $\\\\sigma(i,j)$ gives us the score for aligning the $i^{th}$ column of $p$ with the $j^{th}$ column of $q$.\\n\\nThe scoring function $\\\\sigma$ can be computed as follows $$\\\\sigma(i,j) = \\\\underset{x\\\\in\\\\Sigma}{\\\\sum}\\\\underset{y\\\\in\\\\Sigma}{\\\\sum}p(x,i)q(y,j)\\\\delta(x,y)$$\\n\\nOnce we have $\\\\sigma$, we can use it to come up with a recurrence for aligning two profiles. If $S[i,j]$ is the score for first $i$ columns of profile $p$ with the first $j$ columns of profile $j$, then we have:\\n\\n$$S[i,j] = max \\\\begin{cases}\\n0 & \\\\text{$i=0$ and $j=0$}\\\\\\\\\\nS[i-1,j] + \\\\tau_1(-,i),& i \\\\gt 0\\\\\\\\\\nS[i,j-1] + \\\\tau_2(-,j),& j \\\\gt 0\\\\\\\\\\nS[i-1,j-1] + \\\\sigma(i,j),& \\\\text{$i\\\\gt0$ and $j\\\\gt0$}\\\\\\\\\\n\\\\end{cases}$$\\n\\nGiven the recurrence, complete the following parts:\\n* Finish the `compute_sigma` function which computes the scoring function for aligning columns of profile.\\n* Complete the `align_profile_profile` function below using the given recurrence.\\n\\nFor tie breaking in `align_profile_profile`, please follow the priority defined in `align_sequence_profile` (the given function): (LEFT, UP, TOPLEFT).\\n\\"\\"\\""' at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/copy_of_hw2.py:265:0:293:3
[2023-02-11 19:04:42] [build-stdout] [INFO] [1] Read 2370 nodes and 501 edges from TSG output
[2023-02-11 19:04:42] [build-stdout] [INFO] [1] Extracted file /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/copy_of_hw2.py in 913ms
[2023-02-11 19:04:42] [build-stdout] [INFO] Processed 1 modules in 1.28s
[2023-02-11 19:04:42] Plumbing command codeql database trace-command completed.
[2023-02-11 19:04:42] [PROGRESS] database create> Finalizing database at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample.
[2023-02-11 19:04:42] Running plumbing command: codeql database finalize --mode=normal --no-db-cluster -- /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample
[2023-02-11 19:04:42] [PROGRESS] database finalize> Running TRAP import for CodeQL database at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample...
[2023-02-11 19:04:42] Running plumbing command: codeql dataset import --dbscheme=/Users/payalmantri/Desktop/CS 598/codeql/python/semmlecode.python.dbscheme -- /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/db-python /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/trap/python
[2023-02-11 19:04:42] Clearing disk cache since the version file /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/db-python/default/cache/version does not exist
[2023-02-11 19:04:42] Tuple pool not found. Clearing relations with cached strings
[2023-02-11 19:04:42] Trimming disk cache at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/db-python/default/cache in mode brutal.
[2023-02-11 19:04:42] Sequence stamp origin is -6354816936481815273
[2023-02-11 19:04:42] Pausing evaluation to hard-clear memory at sequence stamp o+0
[2023-02-11 19:04:42] Unpausing evaluation
[2023-02-11 19:04:42] Pausing evaluation to quickly trim disk at sequence stamp o+1
[2023-02-11 19:04:42] Unpausing evaluation
[2023-02-11 19:04:42] Pausing evaluation to zealously trim disk at sequence stamp o+2
[2023-02-11 19:04:42] Unpausing evaluation
[2023-02-11 19:04:42] Trimming completed (4ms): Purged everything.
[2023-02-11 19:04:42] Scanning for files in /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/trap/python
[2023-02-11 19:04:42] Importing $files.7NU9o2ahZqZpN57UqsDQYvQ_nuE=.trap.gz (1 of 6)
[2023-02-11 19:04:42] Importing $interpreter3.8HNh5cGpOBWN2ufC7Xrochsbj-A=.trap.gz (2 of 6)
[2023-02-11 19:04:42] Importing $stdlib_33.WA472FK1_lLmG9Rs6Hzk0pwJx_Q=.trap (3 of 6)
[2023-02-11 19:04:42] Importing copy_of_hw2.py.dezsqA2SJcjk5elUBhLbsQSZRHQ=.trap.gz (4 of 6)
[2023-02-11 19:04:42] Importing copy_of_hw2.py.dh4fjHHUR1cL7PIIgTZfSiJddjs=.trap.gz (5 of 6)
[2023-02-11 19:04:42] Importing sourceLocationPrefix.trap.gz (6 of 6)
[2023-02-11 19:04:42] Merging 1 fragment for files.
[2023-02-11 19:04:42] Merging 1 fragment for folders.
[2023-02-11 19:04:42] Merging 1 fragment for containerparent.
[2023-02-11 19:04:42] Merging 1 fragment for py_flags_versioned.
[2023-02-11 19:04:42] Merging 1 fragment for py_cobjects.
[2023-02-11 19:04:42] Merging 1 fragment for py_cobjecttypes.
[2023-02-11 19:04:42] Merging 1 fragment for py_cobject_sources.
[2023-02-11 19:04:42] Merging 1 fragment for py_cobjectnames.
[2023-02-11 19:04:42] Merging 1 fragment for py_cmembers_versioned.
[2023-02-11 19:04:42] Merging 1 fragment for py_special_objects.
[2023-02-11 19:04:42] Merging 1 fragment for py_citems.
[2023-02-11 19:04:42] Merging 1 fragment for ext_rettype.
[2023-02-11 19:04:42] Merging 1 fragment for ext_argtype.
[2023-02-11 19:04:42] Merging 1 fragment for ext_argreturn.
[2023-02-11 19:04:42] Merging 1 fragment for ext_proptype.
[2023-02-11 19:04:42] Merging 1 fragment for py_Modules.
[2023-02-11 19:04:42] Merging 1 fragment for py_module_path.
[2023-02-11 19:04:42] Merging 1 fragment for variable.
[2023-02-11 19:04:42] Merging 1 fragment for py_extracted_version.
[2023-02-11 19:04:42] Merging 1 fragment for py_scope_flow.
[2023-02-11 19:04:42] Merging 1 fragment for py_flow_bb_node.
[2023-02-11 19:04:42] Merging 1 fragment for py_successors.
[2023-02-11 19:04:42] Merging 1 fragment for py_idoms.
[2023-02-11 19:04:42] Merging 1 fragment for locations_ast.
[2023-02-11 19:04:42] Merging 1 fragment for py_scope_location.
[2023-02-11 19:04:42] Merging 1 fragment for py_comments.
[2023-02-11 19:04:42] Merging 1 fragment for py_syntax_error_versioned.
[2023-02-11 19:04:42] Merging 1 fragment for sourceLocationPrefix.
[2023-02-11 19:04:42] Saving string and id pools to disk.
[2023-02-11 19:04:42] Finished importing trap files.
[2023-02-11 19:04:42] Pausing evaluation to close the cache at sequence stamp o+3
[2023-02-11 19:04:42] The disk cache is freshly trimmed; leave it be.
[2023-02-11 19:04:42] Unpausing evaluation
[2023-02-11 19:04:42] Plumbing command codeql dataset import completed.
[2023-02-11 19:04:42] [PROGRESS] database finalize> TRAP import complete (425ms).
[2023-02-11 19:04:42] Running plumbing command: codeql database cleanup --mode=normal -- /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample
[2023-02-11 19:04:42] [PROGRESS] database cleanup> Cleaning up existing TRAP files after import...
[2023-02-11 19:04:42] [PROGRESS] database cleanup> TRAP files cleaned up (1ms).
[2023-02-11 19:04:42] [PROGRESS] database cleanup> Cleaning up scratch directory...
[2023-02-11 19:04:42] [PROGRESS] database cleanup> Scratch directory cleaned up (0ms).
[2023-02-11 19:04:42] Running plumbing command: codeql dataset cleanup --mode=normal -- /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/db-python
[2023-02-11 19:04:42] [PROGRESS] dataset cleanup> Cleaning up dataset in /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/db-python.
[2023-02-11 19:04:42] Trimming disk cache at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/db-python/default/cache in mode normal.
[2023-02-11 19:04:42] Sequence stamp origin is -6354816935399139917
[2023-02-11 19:04:42] Pausing evaluation to zealously trim disk at sequence stamp o+0
[2023-02-11 19:04:42] Unpausing evaluation
[2023-02-11 19:04:42] Trimming completed (0ms): Trimmed disposable data from cache.
[2023-02-11 19:04:42] Pausing evaluation to close the cache at sequence stamp o+1
[2023-02-11 19:04:42] The disk cache is freshly trimmed; leave it be.
[2023-02-11 19:04:42] Unpausing evaluation
[2023-02-11 19:04:42] [PROGRESS] dataset cleanup> Trimmed disposable data from cache.
[2023-02-11 19:04:42] [PROGRESS] dataset cleanup> Finalizing dataset in /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/db-python
[2023-02-11 19:04:42] [DETAILS] dataset cleanup> Finished deleting ID pool from /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample/db-python (1ms).
[2023-02-11 19:04:42] Plumbing command codeql dataset cleanup completed.
[2023-02-11 19:04:42] Plumbing command codeql database cleanup completed with status 0.
[2023-02-11 19:04:42] Plumbing command codeql database finalize completed.
[2023-02-11 19:04:42] [PROGRESS] database create> Successfully created database at /Users/payalmantri/Desktop/practice/bioinformatics_uiuc/sample.
[2023-02-11 19:04:42] Terminating normally.
